/*!
 *  @file MainWindow.cpp
 *  @author Clinton Freeman
 *  @date 5/13/2011
 *
 *  Implementation of main window form slots and other functionality. Stubs
 *  auto generated by GUI editor.
 */

// Qt
#include <QtGui>
#include <QtXml>

// OpenNI
#include <XnCppWrapper.h>

// system
#include <string>
#include <vector>

// local
#include <MainWindow.h>
#include <ui_mainwindow.h>
#include <KinectOptionsDialog.h>
#include <AboutDialog.h>
#include <HelpDialog.h>

#include <KinectDrawer.h>
#include <KinectInfo.h>
#include <Pose.h>
#include <PoseSample.h>
#include <SkeletonVector.h>

using PSD::Pose;
using PSD::PoseSample;
using PSD::SCoord;

static Pose currentPose;
static QString currentFilename;

// new way
//KinectInfo* kinectInfo;

/*!
 *  Create the main window.
 *  @todo Switch to using KinectInfo class instead of kinectInfo_t struct.
 */
MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    initKinect();

    // new way of doing things, broken ATM
    //kinectInfo = KinectInfo::getInstance();

    ui->setupUi(this);
    // trigger a change so that the "no sample selected" will be up by
    // default
    on_sampleList_currentItemChanged(NULL, NULL);
}

/*!
 *  Destroy the main window.
 *  @todo Switch to using KinectInfo class instead of kinectInfo_t struct.
 */
MainWindow::~MainWindow()
{
    kinectInfo.context.Release();

    // new way
    //KinectInfo::destroyInstance();

    delete ui;
}

/*
===============================================================================
Menubar Actions
===============================================================================
*/

/*!
 *  File->New
 *  @todo Need a mechanism to flag modifications.
 */
void MainWindow::on_actionNew_triggered()
{
    // first thing we need to know is whether or not the user has modified
    // the current document. the only way a user can modify a document is
    // to add or remove samples.

    /*
    if(!currentPose.isModified())
    {
        setWindowTitle(tr("untitled.pose - PoseDesigner"));
        return;
    }
    */

    if(!ui->sampleList->count())
    {
        this->setWindowTitle(tr("untitled.pose - PoseDesigner"));
        return;
    }

    QMessageBox msgBox;
    msgBox.setText("The document has been modified.");
    msgBox.setInformativeText("Do you want to save your changes?");
    msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard |
                              QMessageBox::Cancel);
    msgBox.setDefaultButton(QMessageBox::Save);
    int ret = msgBox.exec();

    if(ret == QMessageBox::Save)
    {
        on_actionSave_triggered();
        return;
    }
    else if(ret == QMessageBox::Discard)
    {
        ui->sampleList->clear();
        ui->sampleTable->clearContents();
        ui->sampleTable->setRowCount(0);
        ui->statsTable->clearContents();
        currentFilename = QString();
        setWindowTitle(tr("untitled.pose - PoseDesigner"));
        currentPose.clearSamples();
    }
}

/*!
 *  File->Open
 *  @todo Check for modifications to current file
 */
void MainWindow::on_actionOpen_triggered()
{
    if(currentPose.isModified())
    {

    }

    QString filename = QFileDialog::getOpenFileName(this,
        tr("Open Pose"), "./", tr("Pose Files (*.pose)"));

    if(filename.isEmpty())
        return;

    QFile inFile(filename);

    if(!inFile.open(QIODevice::ReadOnly))
    {
        qDebug() << "Unable to read file " << filename << ".";
        return;
    }

    // should probably see if the current file has been modified before
    // continuing

    currentFilename = filename;
    this->setWindowTitle(filename + tr(" - PoseDesigner"));

    QDataStream inStream(&inFile);
    inStream >> currentPose;
    inFile.close();

    // clear sample list
    ui->sampleList->clear();

    // clear the sample table
    ui->sampleTable->clearContents();
    ui->sampleTable->setRowCount(0);

    // clear the stats table
    ui->statsTable->clearContents();

    // add samples to list and table
    QMap<QString, PoseSample> samples = currentPose.getSamples();
    QMap<QString, PoseSample>::iterator sIter;

    for(sIter = samples.begin(); sIter != samples.end(); ++sIter)
    {
        QListWidgetItem *wi = new QListWidgetItem(sIter.key(), ui->sampleList);
        ui->sampleList->addItem(wi);

        // add a row in the table
        int row = ui->sampleTable->rowCount();
        ui->sampleTable->insertRow(row);
        ui->sampleTable->setVerticalHeaderItem(row, new QTableWidgetItem(sIter.key()));

        // populate the columns
        QTableWidgetItem *newItem;
        for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
        {
            SCoord sc = sIter.value().getJCoord(col);
            newItem = new QTableWidgetItem(QString("Phi: %1, Theta: %2").arg(sc.phi).arg(sc.theta));
            ui->sampleTable->setItem(row, col, newItem);
        }
    }

    // display the new mean and tolerance in their respective rows
    //! @todo magic numbers 0 and 1
    //! @todo maybe a populateRow fcn to remove duplicate code
    QTableWidgetItem *newItem;

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        SCoord sc = currentPose.getMean().getJCoord(col);
        newItem = new QTableWidgetItem(QString("Phi: %1, Theta: %2").arg(sc.phi).arg(sc.theta));
        ui->statsTable->setItem(0, col, newItem);
    }

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        SCoord sc = currentPose.getStdDev().getJCoord(col);
        newItem = new QTableWidgetItem(QString("Phi: %1, Theta: %2").arg(sc.phi).arg(sc.theta));
        ui->statsTable->setItem(1, col, newItem);
    }
}

static void saveFile(QString filename)
{
    QFile outFile(filename);

    if(!outFile.open(QIODevice::WriteOnly))
    {
        qDebug() << "Unable to write to file " << filename << ".";
        return;
    }

    QDataStream outStream(&outFile);
    outStream << currentPose;
    outFile.close();
}

/*!
 *  File->Save
 */
void MainWindow::on_actionSave_triggered()
{
    if(!currentFilename.isEmpty())
        saveFile(currentFilename);
    else
        on_actionSaveAs_triggered();
}

/*!
 *  File->Save As...
 */
void MainWindow::on_actionSaveAs_triggered()
{
    QString filename = QFileDialog::getSaveFileName(this,
        tr("Save Pose As"), "./", tr("Pose Files (*.pose)"));

    if(filename.isEmpty())
        return;

    saveFile(filename);

    this->setWindowTitle(filename + " - PoseDesigner");
    currentFilename = filename;
}

/*!
 *  File->Export...
 */

static int const INDENT = 2;

void MainWindow::on_actionExport_triggered()
{
    QString filename = QFileDialog::getSaveFileName(this,
        tr("Export Pose"), "./", tr("Pose Files (*.pd)"));

    if(filename.isEmpty())
        return;

    QFile exptFile(filename);
    if(!exptFile.open(QIODevice::WriteOnly))
    {
        qDebug() << "Unable to export to file " << filename << ".";
        return;
    }

    QDomDocument expt("Pose");
    QDomElement root = expt.createElement("pose");
    expt.appendChild(root);

    QDomElement mean = expt.createElement("mean");

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        QString s;
        s << col;
        QDomElement skelSC = expt.createElement(s);
        QDomText skelSCText = expt.createTextNode(s);
        SCoord sc = currentPose.getMean().getJCoord(col);
        skelSCText.setNodeValue(QString("%1, %2").arg(sc.phi).arg(sc.theta));
        skelSC.appendChild(skelSCText);
        mean.appendChild(skelSC);
    }
    root.appendChild(mean);

    QDomElement stddev = expt.createElement("stddev");

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        QString s;
        s << col;
        QDomElement skelSC = expt.createElement(s);
        QDomText skelSCText = expt.createTextNode(s);
        SCoord sc = currentPose.getStdDev().getJCoord(col);
        skelSCText.setNodeValue(QString("%1, %2").arg(sc.phi).arg(sc.theta));
        skelSC.appendChild(skelSCText);
        stddev.appendChild(skelSC);
    }
    root.appendChild(stddev);

    QTextStream ts(&exptFile);
    expt.save(ts, INDENT);

    exptFile.close();
}

/*!
 *  File->Exit
 *  @todo Implement
 */
void MainWindow::on_actionExit_triggered()
{
    if(currentPose.isModified())
    {
        QMessageBox msgBox;
        msgBox.setText("The document has been modified.");
        msgBox.setInformativeText("Do you want to save your changes?");
        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard |
                                  QMessageBox::Cancel);
        msgBox.setDefaultButton(QMessageBox::Save);
        int ret = msgBox.exec();

        switch (ret)
        {
        case QMessageBox::Save:
            // Save was clicked
            on_actionSave_triggered();
            break;
        case QMessageBox::Discard:
            // Don't Save was clicked, skip to exit
            break;
        case QMessageBox::Cancel:
            // Cancel was clicked, abort exit
            return;
        default:
            // should never be reached
            break;
        }
    }

    QApplication::exit(0);
}

/*!
 *  Edit->Cut
 *  @todo Implement
 *  @note This isn't really applicable anywhere...
 */
void MainWindow::on_actionCut_triggered(){}

/*!
 *  Edit->Copy
 *  @todo Implement
 */
void MainWindow::on_actionCopy_triggered(){}

/*!
 *  Edit->Paste
 *  @todo Implement
 */
void MainWindow::on_actionPaste_triggered(){}

/*!
 *  Edit->Delete
 *  @todo Implement
 */
void MainWindow::on_actionDelete_triggered(){}

/*!
 *  Edit->Select All
 *  @todo Implement
 */
void MainWindow::on_actionSelect_All_triggered(){}

/*!
 *  Help->PoseDesigner Help
 *  @note Not actually in use at the moment.
 */
void MainWindow::on_actionPoseDesigner_Help_triggered()
{
    HelpDialog *hDialog = new HelpDialog(this);
    hDialog->show();
}

/*!
 *  Help->About PoseDesigner
 */
void MainWindow::on_actionAbout_PoseDesigner_triggered()
{
    AboutDialog *aDialog = new AboutDialog(this);
    aDialog->show();
}

/*
===============================================================================
"Big Buttons in the Middle" Actions
===============================================================================
*/

// Helper for adding and removing samples
void MainWindow::calculateStats()
{
    currentPose.calcStats();

    // populate the columns
    QTableWidgetItem *newItem;

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        SCoord sc = currentPose.getMean().getJCoord(col);
        newItem = new QTableWidgetItem(QString("%3: %1, %4: %2").arg(sc.phi).arg(sc.theta).arg(QChar(0x03A6)).arg(QChar(0x03B8)));
        ui->statsTable->setItem(0, col, newItem); //! @todo magic number
    }

    for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
    {
        SCoord sc = currentPose.getStdDev().getJCoord(col);
        newItem = new QTableWidgetItem(QString("%3: %1, %4: %2").arg(sc.phi).arg(sc.theta).arg(QChar(0x03A6)).arg(QChar(0x03B8)));
        ui->statsTable->setItem(1, col, newItem); //! @todo magic number
    }
}

/*!
 *  Button: Take Sample
 */
void MainWindow::on_buttonTakeSample_clicked()
{   
    if(!kinectInfo.bConnected)
        return;

    xn::SkeletonCapability sc = kinectInfo.userGenerator.GetSkeletonCap();

    // make sure we actually have data to sample, otherwise inform user
    //! @todo customize look w/ css
    if(!sc.IsTracking(1))
    {
        QMessageBox msgBox;
        msgBox.setText("First user not found (blue user).");
        msgBox.setInformativeText("Please register skeleton first.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        return;
    }

    PoseSample newSample;
    QImage image;

    // shorten expressions
    GLWidget* kw = ui->kinectWidget;

    // first, grab relevant portion of GLWidget framebuffer. this is important
    // to do first because a person who is timing themselves won't be able to
    // hit confirm and have his image saved correctly
    int side = qMin(kw->width(), kw->height());
    image = kw->grabFrameBuffer().copy((kw->width()  - side) / 2,
                                       (kw->height() - side) / 2,
                                       side, side);


    // currently we only track the first user
    if(sc.IsTracking(1))
    {
        // defined the ++ operator for XnSkeletonJoint in PoseSample.h...
        // OpenNI was not kind enough to do this
        for(XnSkeletonJoint sj = XN_SKEL_HEAD; sj <= XN_SKEL_RIGHT_FOOT; sj++)
        {
            //qDebug("%d", sj);
            sc.GetSkeletonJointPosition(1, sj, newSample.getJPositions_nc()[sj]); // gross hack to get around const
        }

        newSample.calcCoords();
    }

    // prompt user for sample name
    bool accept;
    QString text = QInputDialog::getText(this, tr("New Sample"),
                                         tr("Sample name:"), QLineEdit::Normal,
                                         "New Sample", &accept);
    if(accept && !text.isEmpty())
    {
        // then set name and pass in image
        newSample.setName(text);
        newSample.setImage(image);

        //! @todo expand upon this
        //QString path = "C:/kinect/" + text + ".jpg";
        //image.save(path, "JPEG");

        // add the sample to the list
        QListWidgetItem *wi = new QListWidgetItem(text, ui->sampleList);
        wi->setFlags(wi->flags() | Qt::ItemIsEditable);
        ui->sampleList->addItem(wi);

        // add a row in the table
        int row = ui->sampleTable->rowCount();
        ui->sampleTable->insertRow(row);
        ui->sampleTable->setVerticalHeaderItem(row, new QTableWidgetItem(text));

        // populate the columns
        QTableWidgetItem *newItem;
        for(SkeletonVector col = NECK_HEAD; col < SKEL_VEC_MAX; col++)
        {
            SCoord coord = newSample.getJCoord(col);
            //! @todo this is really ugly... r
            newItem = new QTableWidgetItem(QString("%3: %1, %4: %2").arg(coord.phi).arg(coord.theta).arg(QChar(0x03A6)).arg(QChar(0x03B8)));
            ui->sampleTable->setItem(row, col, newItem);
        }

        // add it to the sample collection for this pose
        currentPose.addSample(text, newSample);

        // recalculate statistics
        calculateStats();
    }
}

/*!
 *  Button: Take Sample Timer
 *  Waits specified number of seconds then calls regular take sample.
 */
void MainWindow::on_buttonTakeSampleTimer_clicked()
{
    if(!kinectInfo.bConnected)
        return;

    bool accept;
    //! @todo customize look w/ css
    int time = QInputDialog::getInt(this, tr("Timed Sample"),
                                    tr("How long to wait:"),
                                    0, 0, 60, 1, &accept);

    if(accept)
    {
        QTimer *timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this,
                SLOT(on_buttonTakeSample_clicked()));
        timer->setSingleShot(true);
        timer->start(time * 1000);
    }
}

/*!
 *  Button: Remove Sample
 *  @todo Need a check to make sure something is actually selected in the
 *  list widget.
 */
void MainWindow::on_buttonRemoveSample_clicked()
{
    if(!kinectInfo.bConnected)
        return;

    // TODO: need check here to make sure something is actually selected
    // in the list widget
    QListWidget *lw = ui->sampleList;
    QTableWidget *tw = ui->sampleTable;

    // empty list
    if(!lw->count())
    {
        QMessageBox msgBox;
        msgBox.setText("No samples to remove.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        return;
    }

    // populated list but nothing selected
    if(lw->selectedItems().isEmpty())
    {
        QMessageBox msgBox;
        msgBox.setText("Please select a sample from the list and try again.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        return;
    }

    // get the name of the item
    QString name = lw->currentItem()->text();

    // remove it from the current pose's samples
    currentPose.removeSample(name);

    // remove it from the data table
    tw->removeRow(lw->row(lw->currentItem()));

    // remove it from the list
    lw->takeItem(lw->row(lw->currentItem()));

    // if samples remain, recalculate stats
    if(lw->count())
        calculateStats();
    // otherwise clear them
    else
    {
        tw->clearContents();
        ui->statsTable->clearContents();
    }
}

/*!
 *  Button: Kinect Settings
 */
void MainWindow::on_buttonKinectSettings_clicked()
{
    if(!kinectInfo.bConnected)
        return;

    KinectOptionsDialog *koDialog = new KinectOptionsDialog(this);
    koDialog->show();
}

/*
===============================================================================
Various Widget Actions
===============================================================================
*/

/*!
 *  Item changed in sample list
 */
void MainWindow::on_sampleList_currentItemChanged
(QListWidgetItem *current, QListWidgetItem *previous)
{
    QGraphicsScene *scene = new QGraphicsScene();

    if(current == NULL)
    {
        QImage image(":/images/gui/icons/nosample.png");
        //scene->setBackgroundBrush(Qt::NoBrush);
        QSize size = QSize(ui->samplePreview->width()-2,
                           ui->samplePreview->height()-2);
        scene->addPixmap(QPixmap::fromImage(image.scaled(size)));
        ui->samplePreview->setScene(scene);
        ui->samplePreview->update();
        return;
    }

    QString name = ui->sampleList->currentItem()->text();
    QImage image = currentPose.getSample(name).getImage();
    QSize size = QSize(ui->samplePreview->width()-2,
                       ui->samplePreview->height()-2);

    scene->addPixmap(QPixmap::fromImage(image.scaled(size)));

    ui->samplePreview->setScene(scene);
    ui->samplePreview->update();
}
